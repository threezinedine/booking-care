// <auto-generated />
using System;
using BookingCare.API.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingCare.API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240303083607_first-migration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("BookingCare.API.Models.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduleTimeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduleTimeId");

                    b.HasIndex("StatusId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("BookingCare.API.Models.Clinic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("clinics");
                });

            modelBuilder.Entity("BookingCare.API.Models.History", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("histories");
                });

            modelBuilder.Entity("BookingCare.API.Models.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("positions");

                    b.HasData(
                        new
                        {
                            Id = "750c1298-e23a-43f0-afda-54644f5e31cc",
                            Name_En = "Non Position",
                            Name_Vi = "Đéo có"
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = "4e1b9bb1-b407-4875-bca7-bc48d4018497",
                            Name_En = "Patient",
                            Name_Vi = "Bệnh nhân"
                        },
                        new
                        {
                            Id = "85314483-5730-4409-81b8-1ad31d664537",
                            Name_En = "Doctor",
                            Name_Vi = "Bác sĩ"
                        },
                        new
                        {
                            Id = "e0302c20-ddbe-46aa-95f4-d82dcfd4f4af",
                            Name_En = "Admin",
                            Name_Vi = "Đấng"
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScheduleTimeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ScheduleTimeId");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("BookingCare.API.Models.ScheduleTime", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("scheduletimes");
                });

            modelBuilder.Entity("BookingCare.API.Models.Specialty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("specialties");

                    b.HasData(
                        new
                        {
                            Id = "e96b5e58-8a02-4176-872f-12f701074ef4",
                            Description_En = "This role is used for non-doctor users",
                            Description_Vi = "Chức vụ này dành cho người không phải là bác sĩ",
                            ImageUrl = "",
                            Name_En = "No Specialty",
                            Name_Vi = "Đéo có chuyên khoa"
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("BookingCare.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialtyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ClinicUser", b =>
                {
                    b.Property<string>("ClinicsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClinicsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ClinicUser");
                });

            modelBuilder.Entity("BookingCare.API.Models.Booking", b =>
                {
                    b.HasOne("BookingCare.API.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.ScheduleTime", "ScheduleTime")
                        .WithMany()
                        .HasForeignKey("ScheduleTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("ScheduleTime");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BookingCare.API.Models.History", b =>
                {
                    b.HasOne("BookingCare.API.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BookingCare.API.Models.Schedule", b =>
                {
                    b.HasOne("BookingCare.API.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.ScheduleTime", "ScheduleTime")
                        .WithMany()
                        .HasForeignKey("ScheduleTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("ScheduleTime");
                });

            modelBuilder.Entity("BookingCare.API.Models.User", b =>
                {
                    b.HasOne("BookingCare.API.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Role");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ClinicUser", b =>
                {
                    b.HasOne("BookingCare.API.Models.Clinic", null)
                        .WithMany()
                        .HasForeignKey("ClinicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingCare.API.Models.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
