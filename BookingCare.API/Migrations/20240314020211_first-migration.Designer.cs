// <auto-generated />
using System;
using BookingCare.API.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingCare.API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240314020211_first-migration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("BookingCare.API.Models.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduleTimeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduleTimeId");

                    b.HasIndex("StatusId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("BookingCare.API.Models.Clinic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("clinics");
                });

            modelBuilder.Entity("BookingCare.API.Models.History", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("histories");
                });

            modelBuilder.Entity("BookingCare.API.Models.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("positions");

                    b.HasData(
                        new
                        {
                            Id = "6afc3f27-6d4e-4050-a78d-c648393bcc1d",
                            Name_En = "Non Position",
                            Name_Vi = "Đéo có"
                        },
                        new
                        {
                            Id = "b5f615df-5006-4ab3-9b30-9fe5b3e87c1c",
                            Name_En = "Doctor of Medicine",
                            Name_Vi = "Trưởng Khoa"
                        },
                        new
                        {
                            Id = "bd62ddca-2e06-4f95-b191-2084cceca3ac",
                            Name_En = "Doctor of Osteopathic Medicine",
                            Name_Vi = "Bác sĩ y học thực hành"
                        },
                        new
                        {
                            Id = "0a0c8a4a-db06-44b4-a568-f9e3f09dac48",
                            Name_En = "Professor",
                            Name_Vi = "Giáo sư"
                        },
                        new
                        {
                            Id = "ec041a65-1601-4a8b-8141-85769c9f4b7a",
                            Name_En = "Fellow",
                            Name_Vi = "Thực tập chuyên môn"
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = "0c3d473b-100d-43c0-9bf4-14bdd2810a55",
                            Name_En = "Patient",
                            Name_Vi = "Bệnh nhân"
                        },
                        new
                        {
                            Id = "23dc80bc-71eb-47f2-96b7-86525058c735",
                            Name_En = "Doctor",
                            Name_Vi = "Bác sĩ"
                        },
                        new
                        {
                            Id = "6faa8346-b48e-4c72-b639-7d7b56ea9c36",
                            Name_En = "Admin",
                            Name_Vi = "Đấng"
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScheduleTimeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ScheduleTimeId");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("BookingCare.API.Models.ScheduleTime", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("scheduletimes");
                });

            modelBuilder.Entity("BookingCare.API.Models.Specialty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("specialties");

                    b.HasData(
                        new
                        {
                            Id = "b275c5bd-169d-40f6-a9e8-1358973d9836",
                            Description_En = "This role is used for non-doctor users",
                            Description_Vi = "Chức vụ này dành cho người không phải là bác sĩ",
                            ImageUrl = "",
                            Name_En = "No Specialty",
                            Name_Vi = "Đéo có chuyên khoa"
                        },
                        new
                        {
                            Id = "9f982568-56ba-4c1f-a8d9-389a4d839edf",
                            Description_En = "This role is used for cardiology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tim mạch",
                            ImageUrl = "",
                            Name_En = "Cardiology",
                            Name_Vi = "Tim mạch"
                        },
                        new
                        {
                            Id = "4cb4e0e7-5142-4ddd-9443-1e93e9e455b4",
                            Description_En = "This role is used for dermatology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ da liễu",
                            ImageUrl = "",
                            Name_En = "Dermatology",
                            Name_Vi = "Da liễu"
                        },
                        new
                        {
                            Id = "317205c0-4a50-47e2-9d38-dd24197f6b91",
                            Description_En = "This role is used for endocrinology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ nội tiết",
                            ImageUrl = "",
                            Name_En = "Endocrinology",
                            Name_Vi = "Nội tiết"
                        },
                        new
                        {
                            Id = "204c3b8b-590c-4aac-91f6-03638683c76c",
                            Description_En = "This role is used for gastroenterology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tiêu hóa",
                            ImageUrl = "",
                            Name_En = "Gastroenterology",
                            Name_Vi = "Tiêu hóa"
                        },
                        new
                        {
                            Id = "14f8cfc0-18a9-4839-9617-3a74b7664ce1",
                            Description_En = "This role is used for hematology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ huyết học",
                            ImageUrl = "",
                            Name_En = "Hematology",
                            Name_Vi = "Huyết học"
                        },
                        new
                        {
                            Id = "66005a74-404d-4ac8-a73e-343d392f0af8",
                            Description_En = "This role is used for general practice doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ y học tổng quát",
                            ImageUrl = "",
                            Name_En = "General Practice",
                            Name_Vi = "Y học tổng quát"
                        },
                        new
                        {
                            Id = "922a6f25-2fdb-4236-96f8-5b42e788385b",
                            Description_En = "This role is used for neurology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ thần kinh",
                            ImageUrl = "",
                            Name_En = "Neurology",
                            Name_Vi = "Thần kinh"
                        },
                        new
                        {
                            Id = "720dc86b-86ee-4048-9540-74fd3eb42ca9",
                            Description_En = "This role is used for oncology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ ung thư",
                            ImageUrl = "",
                            Name_En = "Oncology",
                            Name_Vi = "Ung thư"
                        },
                        new
                        {
                            Id = "426c853f-c038-4507-8b8c-764ed57dee0d",
                            Description_En = "This role is used for ophthalmology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ mắt",
                            ImageUrl = "",
                            Name_En = "Ophthalmology",
                            Name_Vi = "Mắt"
                        },
                        new
                        {
                            Id = "94b3d632-0fc4-4cf0-8c57-cf634ee1bac9",
                            Description_En = "This role is used for otolaryngology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tai mũi họng",
                            ImageUrl = "",
                            Name_En = "Otolaryngology",
                            Name_Vi = "Tai mũi họng"
                        },
                        new
                        {
                            Id = "86a47f17-8d18-4d44-8211-78fe1c47ea52",
                            Description_En = "This role is used for pediatrics doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ nhi",
                            ImageUrl = "",
                            Name_En = "Pediatrics",
                            Name_Vi = "Nhi"
                        },
                        new
                        {
                            Id = "70ba2fb8-5280-4b55-b8cc-805b06b669d5",
                            Description_En = "This role is used for psychiatry doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tâm thần học",
                            ImageUrl = "",
                            Name_En = "Psychiatry",
                            Name_Vi = "Tâm thần học"
                        },
                        new
                        {
                            Id = "1035eb90-df7c-437e-8914-e28f58dd0be4",
                            Description_En = "This role is used for radiology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ x quang",
                            ImageUrl = "",
                            Name_En = "Radiology",
                            Name_Vi = "X quang"
                        },
                        new
                        {
                            Id = "33d7ee8c-3c88-419e-874a-fe64e321a5d2",
                            Description_En = "This role is used for surgery doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ phẫu thuật",
                            ImageUrl = "",
                            Name_En = "Surgery",
                            Name_Vi = "Phẫu thuật"
                        },
                        new
                        {
                            Id = "4748b4b6-cb22-4b3f-a7d5-3dc0fdac3204",
                            Description_En = "This role is used for urology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tiết niệu",
                            ImageUrl = "",
                            Name_En = "Urology",
                            Name_Vi = "Tiết niệu"
                        },
                        new
                        {
                            Id = "55a6de2f-ee00-4346-abbc-f0a9c709fe9b",
                            Description_En = "This role is used for vascular surgery doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ phẫu thuật mạch máu",
                            ImageUrl = "",
                            Name_En = "Vascular Surgery",
                            Name_Vi = "Phẫu thuật mạch máu"
                        },
                        new
                        {
                            Id = "591dc94f-e850-4e7e-86fa-21409fdd5914",
                            Description_En = "This role is used for nephrology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ thận",
                            ImageUrl = "",
                            Name_En = "Nephrology",
                            Name_Vi = "Thận"
                        },
                        new
                        {
                            Id = "06b5f3fc-2d2d-4af4-bc02-a2f9bcaccabe",
                            Description_En = "This role is used for pulmonology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ hô hấp",
                            ImageUrl = "",
                            Name_En = "Pulmonology",
                            Name_Vi = "Hô hấp"
                        },
                        new
                        {
                            Id = "830618e4-7edf-439f-b523-7595ff94ff1e",
                            Description_En = "This role is used for infectious disease doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ nhiễm trùng",
                            ImageUrl = "",
                            Name_En = "Infectious Disease",
                            Name_Vi = "Nhiễm trùng"
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("BookingCare.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialtyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ClinicUser", b =>
                {
                    b.Property<string>("ClinicsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClinicsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ClinicUser");
                });

            modelBuilder.Entity("BookingCare.API.Models.Booking", b =>
                {
                    b.HasOne("BookingCare.API.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.ScheduleTime", "ScheduleTime")
                        .WithMany()
                        .HasForeignKey("ScheduleTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("ScheduleTime");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BookingCare.API.Models.History", b =>
                {
                    b.HasOne("BookingCare.API.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BookingCare.API.Models.Schedule", b =>
                {
                    b.HasOne("BookingCare.API.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.ScheduleTime", "ScheduleTime")
                        .WithMany()
                        .HasForeignKey("ScheduleTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("ScheduleTime");
                });

            modelBuilder.Entity("BookingCare.API.Models.User", b =>
                {
                    b.HasOne("BookingCare.API.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Role");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ClinicUser", b =>
                {
                    b.HasOne("BookingCare.API.Models.Clinic", null)
                        .WithMany()
                        .HasForeignKey("ClinicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingCare.API.Models.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
