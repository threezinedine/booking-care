// <auto-generated />
using System;
using BookingCare.API.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingCare.API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("BookingCare.API.Models.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduleTimeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduleTimeId");

                    b.HasIndex("StatusId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("BookingCare.API.Models.Clinic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("clinics");
                });

            modelBuilder.Entity("BookingCare.API.Models.History", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("histories");
                });

            modelBuilder.Entity("BookingCare.API.Models.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("positions");

                    b.HasData(
                        new
                        {
                            Id = "28d8800a-f3a7-42e6-a7ef-3cbb4760cc6d",
                            Name_En = "Non Position",
                            Name_Vi = "Đéo có"
                        },
                        new
                        {
                            Id = "e636245a-e6db-4972-8ecf-06a0c28164be",
                            Name_En = "Doctor of Medicine",
                            Name_Vi = "Trưởng Khoa"
                        },
                        new
                        {
                            Id = "b3600b4a-6e32-49f9-9244-479a5fcb7462",
                            Name_En = "Doctor of Osteopathic Medicine",
                            Name_Vi = "Bác sĩ y học thực hành"
                        },
                        new
                        {
                            Id = "42578bfd-560a-4158-8b0b-78b722f77343",
                            Name_En = "Professor",
                            Name_Vi = "Giáo sư"
                        },
                        new
                        {
                            Id = "e9510b42-b8c4-494b-9186-bfda1361b313",
                            Name_En = "Fellow",
                            Name_Vi = "Thực tập chuyên môn"
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = "2775d48f-f37e-42db-bb3c-d6aee4a03b99",
                            Name_En = "Patient",
                            Name_Vi = "Bệnh nhân"
                        },
                        new
                        {
                            Id = "623c7c85-3746-424d-8035-e2065aab612c",
                            Name_En = "Doctor",
                            Name_Vi = "Bác sĩ"
                        },
                        new
                        {
                            Id = "11891e52-1c84-4f20-bcc3-a81dea8498b9",
                            Name_En = "Admin",
                            Name_Vi = "Đấng"
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScheduleTimeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ScheduleTimeId");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("BookingCare.API.Models.ScheduleTime", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("scheduletimes");

                    b.HasData(
                        new
                        {
                            Id = "f4419315-72d2-4f67-b451-30b58cd174d6",
                            End = new TimeOnly(9, 0, 0),
                            Start = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = "f72a8046-2d75-4fb5-a156-3bf4c716b405",
                            End = new TimeOnly(10, 0, 0),
                            Start = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = "54e6c135-75b6-468d-84d9-3d5263986b28",
                            End = new TimeOnly(11, 0, 0),
                            Start = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = "0657de52-ed79-4c63-bfda-4e354950161a",
                            End = new TimeOnly(12, 0, 0),
                            Start = new TimeOnly(11, 0, 0)
                        },
                        new
                        {
                            Id = "684de8aa-abf2-4031-ad64-3f5d20d28f77",
                            End = new TimeOnly(14, 0, 0),
                            Start = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = "5c55b089-7085-4f63-a3b0-ead11acd2a27",
                            End = new TimeOnly(15, 0, 0),
                            Start = new TimeOnly(14, 0, 0)
                        },
                        new
                        {
                            Id = "b6b8fa66-eee9-48f8-90d6-03131aea970d",
                            End = new TimeOnly(16, 0, 0),
                            Start = new TimeOnly(15, 0, 0)
                        },
                        new
                        {
                            Id = "aa9ce14f-5659-41be-b6bd-9a67ed9308ef",
                            End = new TimeOnly(17, 0, 0),
                            Start = new TimeOnly(16, 0, 0)
                        },
                        new
                        {
                            Id = "b3199f08-366c-41e2-b7f3-6fbc5ae5b7d0",
                            End = new TimeOnly(18, 0, 0),
                            Start = new TimeOnly(17, 0, 0)
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Specialty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("specialties");

                    b.HasData(
                        new
                        {
                            Id = "0dd8bca5-9605-4344-b28b-d2d3a394d077",
                            Description_En = "This role is used for non-doctor users",
                            Description_Vi = "Chức vụ này dành cho người không phải là bác sĩ",
                            ImageUrl = "",
                            Name_En = "No Specialty",
                            Name_Vi = "Đéo có chuyên khoa"
                        },
                        new
                        {
                            Id = "65d1fe06-b795-4930-87f1-d4d96c7968f0",
                            Description_En = "This role is used for cardiology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tim mạch",
                            ImageUrl = "",
                            Name_En = "Cardiology",
                            Name_Vi = "Tim mạch"
                        },
                        new
                        {
                            Id = "3d3c0d07-9d89-48f8-842a-469a30d14d4b",
                            Description_En = "This role is used for dermatology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ da liễu",
                            ImageUrl = "",
                            Name_En = "Dermatology",
                            Name_Vi = "Da liễu"
                        },
                        new
                        {
                            Id = "b474dc47-22e0-4f63-8ce2-20d51ccff480",
                            Description_En = "This role is used for endocrinology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ nội tiết",
                            ImageUrl = "",
                            Name_En = "Endocrinology",
                            Name_Vi = "Nội tiết"
                        },
                        new
                        {
                            Id = "ab71059e-49e4-4a58-9df7-cf585cbf3384",
                            Description_En = "This role is used for gastroenterology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tiêu hóa",
                            ImageUrl = "",
                            Name_En = "Gastroenterology",
                            Name_Vi = "Tiêu hóa"
                        },
                        new
                        {
                            Id = "f5db58d4-58aa-4c9e-b57f-fde29d30e368",
                            Description_En = "This role is used for hematology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ huyết học",
                            ImageUrl = "",
                            Name_En = "Hematology",
                            Name_Vi = "Huyết học"
                        },
                        new
                        {
                            Id = "f5080bb2-6250-48cd-ae4c-4186c8d765ac",
                            Description_En = "This role is used for general practice doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ y học tổng quát",
                            ImageUrl = "",
                            Name_En = "General Practice",
                            Name_Vi = "Y học tổng quát"
                        },
                        new
                        {
                            Id = "180f3cf7-2fad-4278-aa9f-88276e3b4634",
                            Description_En = "This role is used for neurology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ thần kinh",
                            ImageUrl = "",
                            Name_En = "Neurology",
                            Name_Vi = "Thần kinh"
                        },
                        new
                        {
                            Id = "46873b85-1ba9-4e36-a8b4-643b9d1989a3",
                            Description_En = "This role is used for oncology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ ung thư",
                            ImageUrl = "",
                            Name_En = "Oncology",
                            Name_Vi = "Ung thư"
                        },
                        new
                        {
                            Id = "e0c61bc8-61a4-4628-9ec9-6b446326ddff",
                            Description_En = "This role is used for ophthalmology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ mắt",
                            ImageUrl = "",
                            Name_En = "Ophthalmology",
                            Name_Vi = "Mắt"
                        },
                        new
                        {
                            Id = "45f45fd0-024e-4f8f-a31c-c9e073949a6d",
                            Description_En = "This role is used for otolaryngology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tai mũi họng",
                            ImageUrl = "",
                            Name_En = "Otolaryngology",
                            Name_Vi = "Tai mũi họng"
                        },
                        new
                        {
                            Id = "8023326f-4867-45d0-b656-76c32ee6163b",
                            Description_En = "This role is used for pediatrics doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ nhi",
                            ImageUrl = "",
                            Name_En = "Pediatrics",
                            Name_Vi = "Nhi"
                        },
                        new
                        {
                            Id = "6b7d2b32-5cc9-4bdd-a9ba-c0433b5b8462",
                            Description_En = "This role is used for psychiatry doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tâm thần học",
                            ImageUrl = "",
                            Name_En = "Psychiatry",
                            Name_Vi = "Tâm thần học"
                        },
                        new
                        {
                            Id = "ebedfdaa-4f80-4638-a8bb-89efbf1c853b",
                            Description_En = "This role is used for radiology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ x quang",
                            ImageUrl = "",
                            Name_En = "Radiology",
                            Name_Vi = "X quang"
                        },
                        new
                        {
                            Id = "a2993f6e-1d86-4cfc-88f8-2845e5ef8003",
                            Description_En = "This role is used for surgery doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ phẫu thuật",
                            ImageUrl = "",
                            Name_En = "Surgery",
                            Name_Vi = "Phẫu thuật"
                        },
                        new
                        {
                            Id = "376e02c2-927c-47ce-bd0d-4bf032a4877a",
                            Description_En = "This role is used for urology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ tiết niệu",
                            ImageUrl = "",
                            Name_En = "Urology",
                            Name_Vi = "Tiết niệu"
                        },
                        new
                        {
                            Id = "c7824f2b-8ece-496e-9457-eff011ddacac",
                            Description_En = "This role is used for vascular surgery doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ phẫu thuật mạch máu",
                            ImageUrl = "",
                            Name_En = "Vascular Surgery",
                            Name_Vi = "Phẫu thuật mạch máu"
                        },
                        new
                        {
                            Id = "f6085e85-09d2-48d6-b87e-9b6f5745e763",
                            Description_En = "This role is used for nephrology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ thận",
                            ImageUrl = "",
                            Name_En = "Nephrology",
                            Name_Vi = "Thận"
                        },
                        new
                        {
                            Id = "53f251ed-5caf-4736-8331-2f00b1ca3053",
                            Description_En = "This role is used for pulmonology doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ hô hấp",
                            ImageUrl = "",
                            Name_En = "Pulmonology",
                            Name_Vi = "Hô hấp"
                        },
                        new
                        {
                            Id = "1f63d90f-0115-43a4-8e5f-c2d61c7e2e99",
                            Description_En = "This role is used for infectious disease doctors",
                            Description_Vi = "Chức vụ này dành cho bác sĩ nhiễm trùng",
                            ImageUrl = "",
                            Name_En = "Infectious Disease",
                            Name_Vi = "Nhiễm trùng"
                        });
                });

            modelBuilder.Entity("BookingCare.API.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name_Vi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("BookingCare.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialtyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ClinicUser", b =>
                {
                    b.Property<string>("ClinicsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClinicsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ClinicUser");
                });

            modelBuilder.Entity("BookingCare.API.Models.Booking", b =>
                {
                    b.HasOne("BookingCare.API.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.ScheduleTime", "ScheduleTime")
                        .WithMany()
                        .HasForeignKey("ScheduleTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("ScheduleTime");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BookingCare.API.Models.History", b =>
                {
                    b.HasOne("BookingCare.API.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BookingCare.API.Models.Schedule", b =>
                {
                    b.HasOne("BookingCare.API.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.ScheduleTime", "ScheduleTime")
                        .WithMany()
                        .HasForeignKey("ScheduleTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("ScheduleTime");
                });

            modelBuilder.Entity("BookingCare.API.Models.User", b =>
                {
                    b.HasOne("BookingCare.API.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Role");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ClinicUser", b =>
                {
                    b.HasOne("BookingCare.API.Models.Clinic", null)
                        .WithMany()
                        .HasForeignKey("ClinicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingCare.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingCare.API.Models.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
